function [K, plev, minplev, numshort, ratio, etc] = ...
    dg_shortISI(spikeTS, varargin)
% Estimate the number of units with a specified refractory period that
% would be required to generate the observed spike train.  It is assumed
% here that all units have the same firing rate, and they become strictly
% Poissonian as soon as the refractory period expires. Also, calculate the
% significance level for rejecting the null hypothesis that the given spike
% train was generated by a true Poisson process (e.g. thresholding
% uncorrelated random noise) based on the relative number of short
% inter-spike intervals in the spike train.
%INPUTS
% spikeTS: a series  of timestamps, each of which represents a spike time
%   in seconds, sorted in ascending order.  Any spike times that are out of
%   order are simply removed from the series, and a warning is issued.
%OUTPUTS
% plev: the probability of getting the number in <spikeTS>, or fewer, of
%   ISIs whose durations are less than <refperiod> from a true Poisson
%   process whose rate is the same as the firing rate of <spikeTS>
%   estimated from the slope of the ISI histogram (or from spike count
%   divided the time interval covered by <spikeTS> if fitting the ISI
%   histogram fails). Note that this p level only tells you how likely it
%   is that the spike train is truly Poissonian; if the actual number of
%   short ISIs is 99% of the number expected from a Poisson process, and
%   the number of spikes is very large, then the p-level will be very low
%   in spite of the fact that the spike train is still highly multiunit.
% numshort: the number of ISIs that were strictly less than <refperiod>.
% minplev: the smallest p level that can be computed given the total number
%   of spikes and the expected number of short ISIs in the Poisson model.
% ratio: the ratio of the number of short ISIs to the number expected from
%   multiunit activity.  Ideally, this should be zero.  It can be greater
%   than one if the spike train is both bursty and multi-unit, and the
%   estimation of intraburst rate from the ISI histo failed.  (Can all
%   those things actually happen at once?  I don't know.)
% K: the estimated number of units in the cluster, assuming that they all
%   fire at the same rate, have the same refractory period, and are
%   Poissonian after the refractory period.  K = NaN indicates that the
%   spike rate was so low that we're likely (>5%) not to see any short ISIs
%   even under the null hypothesis, and so there is no information in ISIs
%   regarding the quality of isolation.  K = Inf indicates that there are
%   actually *more* short ISIs than would be expected even from a purely
%   Poissonian process (with 'retrig' time).  That pretty much guarantees
%   that it is not a single unit, but how non-single is anyone's guess.
% etc: a struct containing the following fields:
%   nonstatsig: chi^2 significance level for non-stationarity test (i.e.
%     the probability of seeing <spikeTS> from a stationary process).  May
%     be NaN if the test could not be performed.
%   avgrate: average firing rate over the entire duration of <spikeTS>.
%   m, b, f, gof, out: from 'dg_fitISIhisto'.
%   hF, hA: from figure plotting.  Not present if 'plot' is not used.
%   pshortnull: the probability of at least one spike during an interval
%     equal to the refractory period under the null hypothesis (Poissonian
%     firing), given <retrig> (see OPTIONS).  This is based on the
%     intra-burst firing rate estimated from the ISI histogram if possible;
%     otherwise it is based on the average rate of the whole spike train.
%     The derivation of K assumes that this is much less than one, and a
%     warning is raised if it is > 0.1.
%   f: from Matlab 'fit' via dg_fitISIhisto.
%   gof: from Matlab 'fit' via dg_fitISIhisto.
%   out: from Matlab 'fit' via dg_fitISIhisto.
%OPTIONS
% 'ref', refperiod - <refperiod> is the nominal refractory period below
%   which an ISI is considered to be short.  Default is 0.002 s (2 ms),
%   which is a good value unless you are studying neurons that are known to
%   be capable of producing spike bursts of over 500 Hz.  Specified in
%   seconds.
% 'retrig', retrig - the artificial refractory period (or "timeout") during
%   which the recording rig will not re-trigger, specified in seconds.
%   Default is 750 microseconds, which appears to be the default value in
%   Cheetah 5.2.1 through 5.6.3.  The default (and perhaps only possible)
%   value in Cheetah 4 appears to be around 550 microseconds based on
%   actual ISIs recorded in large spike files.
% 'plot' - plots the log of the ISI histogram, and overlays the fitted
%   function if the fitting terminated normally.  Returns the fig handle as
%   <etc.hF> and the axes handle as <etc.hA>.
%NOTES
% A stationarity test is performed at the outset to determine whether the
% spike rate drifted over time.  The time period covered by the entire
% spike time series is divided into 3 sections of equal duration, and if
% any section contains a number of spikes that is significantly different
% (chi-squared test, p<.05), a warning is issued.
%   We assume that avgrate * refperiod << 1 in order to keep the math under
% control; if it isn't the warning 'dg_shortISI:highprob' is raised.
% Note that this assumption also entails the assumptions that (-retrig *
% avgrate*(K-1)/K)) and (-refperiod * avgrate*(K-1)/K)) are both close to
% zero.
%   Performance begins to deteriorate (less accurate values of <K> and
% inability to estimate rate from the ISI histogram) as the average rate
% falls to about 1 Hz or lower for synthetic spike trains of 14000 seconds'
% duration (3.9 hr).  Still good at 2 Hz.

%$Rev: 277 $
%$Date: 2021-08-20 16:25:43 -0400 (Fri, 20 Aug 2021) $
%$Author: dgibson $

plotflag = false;
retrig = 750e-6;
refperiod = .002;
argnum = 0;
while true
    argnum = argnum + 1;
    if argnum > length(varargin)
        break
    end
    if ~ischar(varargin{argnum})
        continue
    end
    switch varargin{argnum}
        case 'plot'
            plotflag = true;
        case 'ref'
            argnum = argnum + 1;
            refperiod = varargin{argnum};
        case 'retrig'
            argnum = argnum + 1;
            retrig = varargin{argnum};
        otherwise
            error('dg_shortISI:badoption', ...
                'The option %s is not recognized.', ...
                dg_thing2str(varargin{argnum}));
    end
end

if retrig > refperiod
    error('dg_shortISI:refperiod', ...
        '<refperiod> must be greater than <retrig>.');
end

% stationarity test
numsec = 3;
sectiondur = (spikeTS(end) - spikeTS(1)) / numsec;
secTS = (0 : numsec) * sectiondur + spikeTS(1);
numspikes = NaN(1, numsec);
for k = 1 : numsec
    numspikes(k) = sum(spikeTS >= secTS(k) & spikeTS < secTS(k+1));
end
etc.nonstatsig = dg_chi2test2(numspikes, true);
if isnan(etc.nonstatsig)
    warning('dg_shortISI:insuff', ...
        'Insufficient number of spikes to perform non-stationary test.');
end
if etc.nonstatsig < .05
    warning('dg_shortISI:nonstat', ...
        'Spike rate is significantly non-stationary, p=%.2g.', ...
        etc.nonstatsig);
end

% The "- 1" is here because the start time and end time are by definition
% both spike times, so there is guaranteed to be 1 spike extra at the end
% compared to the expected value.
numspikes = length(spikeTS) - 1;
etc.avgrate = numspikes / (spikeTS(end) - spikeTS(1));
% Each short ISI takes place within a time period of length <refperiod>
% which by definition already contains one spike at the very beginning.
% Therefore, the probability of a short ISI in a Poisson process is the
% probability of seeing one or more spikes in said time period, i.e. one
% minus the probability of seeing zero spikes.  However, the Neuralynx
% Retrigger Time feature introduces a kink, which is that any spikes that
% occur during the Retrigger Time don't get recorded.  Therefore, the
% expected number of spikes is the average rate times (refperiod - retrig),
% where <retrig> is the retrigger time.
%   The probability of seeing a short ISI under our null hypothesis is
% thus:
%   pshortnull = 1 - poisspdf(0, (refperiod - retrig) * etc.avgrate);
% But to make matters even more complicated, many units are quite bursty
% and so the rate used in the model should not be the actual number of
% spikes divided by the length of the spike train, but should be estimated
% from the short-ISI portion of the ISI histogram, which I hereby designate
% <estrate>:
ISIs = diff(spikeTS);
binedges = (0:100)' * refperiod;
ISIcounts = histc(ISIs, binedges);
binctrs = reshape(binedges(1:end-1)' + diff(binedges(1:2))/2, [], 1);
[etc.m, etc.b, etc.f, etc.gof, etc.out] = dg_fitISIhisto(ISIcounts(1:end-1), ...
    binctrs, 'dg_fit_twopiece');
if plotflag
    logpdf = log(ISIcounts(1:end-1) / sum(ISIcounts(1:end-1)));
    etc.hF = figure;
    etc.hA = axes('NextPlot', 'add', 'Parent', etc.hF);
    plot(etc.hA, binctrs, logpdf, '+');
    set(etc.hA, 'NextPlot', 'add');
    xlabel(etc.hA, 'Inter-Spike Interval');
    ylabel('Log(PDF)');
end
if etc.out.exitflag < 1 || etc.m > 0
    % The fitting totally bombed
    estrate = etc.avgrate;
else
    estrate = -etc.m;
    if plotflag
        isgoodpt = ~isinf(logpdf);
        startpt = find(isgoodpt, 1);
        endpt = find(isgoodpt, 1, 'last');
        isL = binctrs <= etc.out.xisect & (1:length(binctrs))' >= startpt;
        isR = binctrs >= etc.out.xisect & (1:length(binctrs))' <= endpt;
        plot(binctrs(isL), etc.out.B(1,1) + etc.out.B(2,1)*binctrs(isL), 'o');
        plot(binctrs(isR), etc.out.B(1,2) + etc.out.B(2,2)*binctrs(isR), 'o');
    end
end
% <etc.pshortnull> is the probability of seeing at least one spike in
% (refperiod - retrig), based on the spike rate estimated from the ISI
% histogram if possible, or just number of spikes over total duration if
% fitting the ISI histo failed.
etc.pshortnull = 1 - poisspdf(0, (refperiod - retrig) * estrate);
if etc.pshortnull > 0.1
    warning('dg_shortISI:highprob', ...
        'Assumption that avgrate * refperiod << 1 violated.');
end

% Now as to the actual number of short ISIs:
numshort = sum(ISIs < refperiod);
if (numshort / numspikes) > estrate  * (refperiod - retrig)
    % This is where the model completely blows up and returns a meaningless
    % negative value for K.  But what the condition says is that there are
    % actually more shortISIs than would be expected from a purely
    % Poissonian process (with 'retrig' time), so we call it <Inf>:
    K = Inf;
else
    % If there K units, then the expected shortISI probability is
    % (1 - 1/K) times the Poissonian probability, which in turn is
    % just estrate * (refperiod - retrig).  So:
    % numshort / numspikes = (1 - 1/K) * estrate * (refperiod - retrig)
    % which, solving for K, gives:
    K = estrate * (refperiod - retrig) / ...
        (estrate * (refperiod - retrig) - numshort / numspikes);
end
ratio = numshort / (etc.pshortnull * numspikes);
% The actual observed frequency of short ISIs in our set of ISIs is by
% definition numshort / numspikes.  Each ISI is either short or not, with
% probability of short given by <etc.pshortnull>.  The p level we want to
% calculate is therefore given by the binomial distribution with parameter
% <etc.pshortnull>:
plev = binocdf(numshort, numspikes, etc.pshortnull);
minplev = binocdf(0, numspikes, etc.pshortnull);
if minplev > .05
    warning('dg_shortISI:fewspikes', ...
        'minplev > .05: %g, %g, %g, %g sp/s.', ...
        minplev, numspikes, etc.pshortnull, etc.avgrate);
    K = NaN;
end

